// Prisma schema docs: https://pris.ly/d/prisma-schema
// =====================================================
// USAGE TIPS:
// -----------------------------------------------------
// 1.) After Updates Run:
// pnpx prisma generate
// -----------------------------------------------------
// 2.) To Run Prisma Studio:
// pnpx prisma studio
// =====================================================

// -----------------------------------------------------
// Config
// -----------------------------------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------
// Models
// -----------------------------------------------------
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  stripeId       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  // -------- Relations --------
  Accounts       Account[]
  Order          Order[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  // -------- Relations --------
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // -------- Rules --------
  @@unique([provider, providerAccountId])
}

model Restaurant {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String     @unique
  tag_line    String
  description String
  image       String     @default("/placeholders/store.png")
  address     String
  phone       String     @default("000-000-0000")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  // -------- Relations --------
  MenuItems   MenuItem[]
  Order       Order[]

  // -------- Rules --------
  @@unique([id, name])
}

model MenuItem {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  slug           String     @unique
  description    String
  calories       Int
  category       String
  price          Float      @default(10.0)
  image          String     @default("/placeholders/general.png")
  stripePriceId  String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  // -------- Relations --------
  restaurant     Restaurant @relation(fields: [restaurantId, restaurantName], references: [id, name])
  restaurantId   String     @db.ObjectId
  restaurantName String
  Order          Order?     @relation(fields: [orderId], references: [id])
  orderId        String?    @db.ObjectId

  // -------- Rules --------
  @@unique([restaurantId, slug])
}

model Order {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  total               Float
  tax                 Float
  tip                 Float?
  paymentMethod       PaymentMethod
  specialInstructions String?
  address             String
  deliveryMethod      DeliveryMethod
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  // -------- Relations --------
  user                User           @relation(fields: [userId], references: [id])
  userId              String         @db.ObjectId
  restaurant          Restaurant     @relation(fields: [restaurantId, restaurantName], references: [id, name])
  restaurantId        String         @db.ObjectId
  restaurantName      String

  items MenuItem[]
}

// -----------------------------------------------------
// Enums
// -----------------------------------------------------
enum DeliveryMethod {
  DELIVERY
  PICKUP
}

enum PaymentMethod {
  CASH
  STRIPE
}
